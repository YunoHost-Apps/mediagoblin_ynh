#!/bin/bash

set -e

# Set app specific variables
app=${!#}
dbname=$app
dbuser=$app

# Load common variables and helpers
. ./_common.sh
check_requirements || die "System requirements are not met."

# Source app helpers
. /usr/share/yunohost/helpers

# Retrieve settings
domain=$(ynh_app_setting_get $app domain)
path=$(ynh_app_setting_get $app path)
path=${path%/}
admin=$(ynh_app_setting_get $app admin)
is_public=$(ynh_app_setting_get $app is_public)
registration=$(ynh_app_setting_get $app registration)
registration=${registration:-0}

DESTDIR="/var/www/$app"
OLDDIR="/srv/${domain}/$app"
DATADIR="/home/yunohost.app/$app"

# Apply some changes on old installation
REINSTALL_ENV=0
if [[ -d $OLDDIR ]]; then
  REINSTALL_ENV=1

  # Stop and remove old services
  sudo service mediagoblin-paster stop || true
  sudo service mediagoblin-celery-worker stop || true
  sudo yunohost service remove mediagoblin-paster || true
  sudo yunohost service remove mediagoblin-celery-worker || true
  sudo rm -f /etc/init.d/mediagoblin-{paster,celery-worker}

  # Move to the new directories
  sudo mv "${OLDDIR}/user_dev" "$DATADIR"
  sudo mv "$OLDDIR" "$DESTDIR"

  # Remove old config, plugin and meta package
  sudo rm -rf "${DESTDIR}/mediagoblin_local.ini" "${DESTDIR}/extlib/httpauth"
  ynh_package_autoremove mediagoblin-meta-deps ||Â true

  # Add new services to YunoHost
  sudo yunohost service add mediagoblin-celeryd -l "/var/log/${app}/celery.log"
  sudo yunohost service add mediagoblin-paster -l "/var/log/${app}/mediagoblin.log"
else
  sudo systemctl -q stop mediagoblin-celeryd.service || true
  sudo systemctl -q stop mediagoblin-paster.service || true
fi

# Check destination directory
[[ ! -d $DESTDIR ]] && die \
"The destination directory '$DESTDIR' does not exist.\
 The app is not correctly installed, you should remove it first."

# Install dependencies
ynh_package_install_from_equivs ../conf/${DEPS_PKG_NAME}.control \
  || die "Unable to install dependencies"

# Update sources
sudo cp -r ../patch "$DESTDIR"
exec_cmd "cd \"${DESTDIR}\" \
 && git reset --hard -q && git fetch -q --tags origin \
 && git checkout -q v${VERSION} \
 && git submodule -q update \
 && git apply ./patch/*.patch" \
  || die "Unable to update MediaGoblin sources."
sudo rm -rf "${DESTDIR}/patch"

# Copy additionnal plugins and fix permissions
sudo cp -r ../sources/plugins/* "${DESTDIR}/extlib/"
sudo chown -hR mediagoblin:www-data "${DESTDIR}/extlib"

# Set and copy MediaGoblin configuration
if [[ $is_public -eq 1 && $registration -eq 1 ]]; then
  tmp_conf="../conf/mediagoblin_registration.ini"
else
  tmp_conf="../conf/mediagoblin.ini"
fi
mediagoblin_conf="${DESTDIR}/mediagoblin.ini"
sed -i "s@#DOMAIN#@${domain}@g"        "$tmp_conf"
sed -i "s@#PATH#@${path}@g"            "$tmp_conf"
sed -i "s@#DBNAME#@${dbname}@g"        "$tmp_conf"
sed -i "s@#ADMIN#@${admin}@g"          "$tmp_conf"
sed -i "s@#DATADIR#@${DATADIR}@g"      "$tmp_conf"
sudo cp "$tmp_conf" "$mediagoblin_conf"
sudo chown mediagoblin: "$mediagoblin_conf"

# Set and copy Paste configuration
paste_conf="${DESTDIR}/paste.ini"
sed -i "s@#DATADIR#@${DATADIR}@g" ../conf/paste.ini
sudo cp ../conf/paste.ini "$paste_conf"
sudo chown mediagoblin: "$paste_conf"

# Prepare setup log
SETUPLOG="/tmp/${app}-upgrade.log"
#TODO:add date
sudo touch "$SETUPLOG" && sudo chown admin $SETUPLOG

# Create a fresh virtualenv
if [[ $REINSTALL_ENV -eq 1 ]]; then
  exec_cmd "cd \"${DESTDIR}\" \
 && rm -rf ./bin ./lib \
 && export VIRTUALENV_FLAGS=\"--quiet\" \
 && ./bootstrap.sh && ./configure --quiet && make" &>>$SETUPLOG \
  || die "Unable to reinstall MediaGoblin. Please see log at ${SETUPLOG}"
fi

# Upgrade MediaGoblin
exec_cmd "cd \"${DESTDIR}\" \
 && ./bin/python setup.py develop --upgrade \
 && ./bin/easy_install --upgrade scikits.audiolab \
 && ./bin/gmg dbupdate \
 && cd extlib/ynhauth \
 && ${DESTDIR}/bin/python ./setup.py develop --upgrade" &>>$SETUPLOG \
  || die "Unable to upgrade MediaGoblin. Please see log at ${SETUPLOG}"

# Create needed directories with proper ownership
sudo install -o mediagoblin -g root -m 770 -d /var/log/${app}

# Set and install systemd services
sed -i "s@#APP#@${app}@g"         ../conf/mediagoblin-*.service
sed -i "s@#DESTDIR#@${DESTDIR}@g" ../conf/mediagoblin-*.service
sudo cp ../conf/mediagoblin-*.service /etc/systemd/system/

# Copy and set nginx configuration
nginx_conf="/etc/nginx/conf.d/${domain}.d/${app}.conf"
sed -i "s@#PATH#@${path}@g"       ../conf/nginx.conf
sed -i "s@#DESTDIR#@${DESTDIR}@g" ../conf/nginx.conf
sed -i "s@#DATADIR#@${DATADIR}@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf "$nginx_conf"

# Reload services
sudo systemctl daemon-reload
sudo systemctl -q enable mediagoblin-celeryd.service
sudo systemctl -q enable mediagoblin-paster.service
sudo systemctl -q start mediagoblin-celeryd.service
sudo systemctl -q start mediagoblin-paster.service
sudo service nginx reload
